/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("__webpack_require__(1);\nmodule.exports = __webpack_require__(13);\n\n\n/*****************\n ** WEBPACK FOOTER\n ** multi main\n ** module id = 0\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///multi_main?");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n// some features need the be polyfilled..\n// https://babeljs.io/docs/usage/polyfill/\n\n// import 'babel-core/polyfill';\n// or import specific polyfills\n\nvar _svg = __webpack_require__(2);\n\nvar _helpersUtil = __webpack_require__(4);\n\nvar OrbitControls = __webpack_require__(12)(THREE);\n//let ThreeBSP = require('three-csg');\n//require('csg');\n\n//tags/elements in html & controls\nvar _three = undefined;\nvar keys = ['Down', 'Right', 'Left', 'Up'];\n\n//socket.io\nvar socket = undefined;\n\n//sizes\nvar windowSize = { //1140 x 750\n  'width': window.innerWidth,\n  'height': window.innerHeight\n};\n\nvar cubeSize = {\n  'width': 20,\n  'height': 1,\n  'depth': 20\n};\n\nvar numCoins = 5;\n\n//three objects\nvar scene = undefined,\n    camera = undefined,\n    renderer = undefined;\n\nvar floor = undefined,\n    grid = undefined,\n    cube = undefined,\n    cubeHor = undefined,\n    cubeVer = undefined,\n    pacman = undefined;\n\n//arrays\nvar outerWalls = [],\n    innerWalls = [],\n    xPosGrid = [],\n    zPosGrid = [],\n    coins = [],\n    xGrid = undefined,\n    zGrid = undefined;\n\n//true/false\nvar follow = false,\n    draw = true;\n\nvar init = function init() {\n  socket = io('http://localhost:3000');\n\n  _three = $('.three');\n\n  if (_three) {\n    setScene();\n  }\n};\n\nvar setScene = function setScene() {\n  //three setup\n  scene = new THREE.Scene();\n\n  camera = new THREE.PerspectiveCamera(75, windowSize.width / windowSize.height, 0.1, 1000);\n  camera.position.set(0, windowSize.width / 20 * 4, 0); //topview\n\n  renderer = new THREE.WebGLRenderer(); //alpha true zorgt dat de achtergrond (zwart) weg is\n  /*{alpha: true}*/renderer.setSize(windowSize.width, windowSize.height);\n\n  _three.append(renderer.domElement);\n\n  //floor\n  floor = new _svg.Floor(windowSize);\n  scene.add(floor.render());\n\n  //grid\n  grid = new _svg.Grid(windowSize);\n  scene.add(grid.render());\n\n  //pacman\n  pacman = new _svg.Pacman();\n  scene.add(pacman.render());\n\n  //light\n  var light = new THREE.HemisphereLight(0xffffbb, 0x080820, 0.6);\n  light.position.set(20, 65, 0);\n  light.castShadow = true;\n  light.intensity = 1;\n  scene.add(light);\n\n  //new OrbitControls(camera);\n  var controls = new OrbitControls(camera); //bestuur camera met muis\n  controls.enabled = false; //uitgeschakeld\n\n  setWalls();\n\n  render();\n};\n\nvar setWalls = function setWalls() {\n\n  var leftWall = grid.position.x - 18.5 * 20;\n  var topWall = grid.position.z - 9.5 * 20;\n\n  //horizontale muren\n  for (var i = topWall; i <= -topWall; i += -(topWall * 2)) {\n    for (var j = leftWall; j <= -leftWall; j += 20) {\n      xPosGrid.push(j);\n      cubeHor = new _svg.Cube(cubeSize);\n      cubeHor._walls(i, j);\n      scene.add(cubeHor.render());\n      outerWalls.push(cubeHor);\n    }\n  }\n  //verticale muren\n  for (var i = leftWall; i <= -leftWall; i += -(leftWall * 2)) {\n    for (var j = topWall; j <= -topWall; j += 20) {\n      zPosGrid.push(j);\n      cubeVer = new _svg.Cube(cubeSize);\n      cubeVer._walls(j, i);\n      scene.add(cubeVer.render());\n      outerWalls.push(cubeVer);\n    }\n  }\n\n  xGrid = xPosGrid;\n  zGrid = zPosGrid;\n\n  xGrid.splice(xGrid[0], 2);\n  xGrid.pop();\n\n  zGrid.splice(zGrid[0], 2);\n  zGrid.pop();\n\n  drawWalls();\n};\n\nvar drawWalls = function drawWalls() {\n  //drag and draw\n  /*let drag = false;\n   _three.mouseup((e) => {\n    drag = false;\n  });\n   _three.mousedown((e) => {\n    drag = true;\n    //drawSingleWall(e);\n     _three.mousemove((e) => {\n      if(drag){\n        drawSingleWall(e);\n      }\n    });\n  });*/\n\n  //click and drag\n  var posX = undefined;\n  var posZ = undefined;\n  var endPosX = undefined;\n  var endPosZ = undefined;\n  var drawDown = false;\n  var drawUp = false;\n\n  _three.mousedown(function (e) {\n    if (!drawDown) {\n      var c1 = convertPos(e);\n      posX = (0, _helpersUtil.closest)(c1.x, xPosGrid);\n      posZ = (0, _helpersUtil.closest)(c1.z, zPosGrid);\n      drawSingleWall(convertPos(e));\n      drawDown = true;\n    }\n  });\n\n  _three.mousemove(function (e) {\n    if (drawDown && !drawUp) {\n      var c2 = convertPos(e);\n      endPosX = (0, _helpersUtil.closest)(c2.x, xPosGrid);\n      endPosZ = (0, _helpersUtil.closest)(c2.z, zPosGrid);\n    }\n  });\n\n  _three.mouseup(function () {\n    drawUp = true;\n    if (drawUp) {\n      drawDown = false;\n      drawUp = false;\n\n      var betweenPos = {};\n\n      if (posX === endPosX) {\n        betweenPos.x = posX;\n        if (posZ < endPosZ) {\n          for (var i = posZ + cubeSize.width; i <= endPosZ; i += cubeSize.width) {\n            betweenPos.z = i;\n            drawSingleWall(betweenPos);\n          }\n        } else {\n          for (var i = posZ - cubeSize.width; i >= endPosZ; i -= cubeSize.width) {\n            betweenPos.z = i;\n            drawSingleWall(betweenPos);\n          }\n        }\n      } else if (posZ === endPosZ) {\n\n        if (posX < endPosX) {\n          for (var i = posX + cubeSize.width; i <= endPosX; i += cubeSize.width) {\n            betweenPos.x = i;\n            betweenPos.z = posZ;\n            drawSingleWall(betweenPos);\n          }\n        } else {\n          for (var i = posX - cubeSize.width; i >= endPosX; i -= cubeSize.width) {\n            betweenPos.x = i;\n            betweenPos.z = posZ;\n            drawSingleWall(betweenPos);\n          }\n        }\n      }\n    }\n  });\n\n  //confirm maze draw with SPACEBAR\n  $('body').keyup(function (e) {\n    if (e.keyCode === 32) {\n      if (!follow) {\n        draw = false;\n        drawCoins();\n        raiseWalls();\n      }\n    }\n  });\n};\n\nvar convertPos = function convertPos(e) {\n  if (draw) {\n    var vector = new THREE.Vector3();\n\n    vector.set(e.clientX / windowSize.width * 2 - 1, -(e.clientY / windowSize.height) * 2 + 1, 0.5);\n\n    vector.unproject(camera);\n\n    var dir = vector.sub(camera.position).normalize();\n\n    var distance = -camera.position.y / dir.y;\n\n    var pos = camera.position.clone().add(dir.multiplyScalar(distance));\n\n    return pos;\n  }\n};\n\nvar drawSingleWall = function drawSingleWall(e) {\n  if (draw) {\n    cube = new _svg.Cube(cubeSize);\n\n    cube._singleBlock(e, xPosGrid, zPosGrid);\n\n    if (cube.position.x === 10 && cube.position.z === 10 || cube.position.x === 10 && cube.position.z === -10 || cube.position.x === -10 && cube.position.z === 10 || cube.position.x === -10 && cube.position.z === -10) {\n      //don't add\n    } else {\n        scene.add(cube.render());\n        innerWalls.push(cube);\n      }\n  }\n  console.log(innerWalls.length);\n\n  /*if(innerWalls.length === 500 && draw){\n    draw = false;\n    drawCoins();\n  }*/\n};\n\nvar drawCoins = function drawCoins() {\n  //Geef positie terug waar geen coin en geen cube is, plaats daar een coin\n  var randomX = (0, _helpersUtil.randomPos)(xGrid);\n  var randomZ = (0, _helpersUtil.randomPos)(zGrid);\n\n  var found = false;\n  var counter = 0;\n\n  innerWalls.forEach(function (w) {\n    counter++;\n\n    if (found) {\n      drawCoins();\n    } else {\n      if (w.position.x === randomX && w.position.z === randomZ) {\n        found = true;\n      }\n    }\n\n    if (counter === innerWalls.length) {\n      console.log('draw');\n\n      if (coins.length === numCoins) {\n        raiseWalls();\n      } else {\n        var coin = new _svg.Coin(randomX, randomZ);\n        scene.add(coin.render());\n        coins.push(coin);\n\n        drawCoins();\n      }\n    }\n  });\n};\n\nvar raiseWalls = function raiseWalls() {\n  outerWalls.forEach(function (wallCube) {\n    //scale muren naar normale grootte (bij camera draaien)\n    wallCube._scaleUp();\n  });\n\n  innerWalls.forEach(function (innerCube) {\n    innerCube._scaleUp();\n  });\n\n  grid.changepos();\n  floor.changepos();\n\n  setFocus();\n};\n\nvar setFocus = function setFocus() {\n  camera.position.set(pacman.position.x + 80, pacman.position.y + 80, pacman.position.z + 50);\n  camera.lookAt(pacman.position);\n  follow = true;\n};\n\nvar movePacman = function movePacman(event, object) {\n  var keypressed = event.keyIdentifier;\n\n  if (keys.indexOf(keypressed) === -1) {\n    return;\n  }\n\n  event.preventDefault();\n\n  switch (keypressed) {\n    case 'Up':\n      object.position.x -= 10;\n      object.rotation.y = 0;\n      break;\n\n    case 'Down':\n      object.position.x += 10;\n      object.rotation.y = Math.PI;\n      break;\n\n    case 'Left':\n      object.position.z += 10;\n      object.rotation.y = Math.PI / 2;\n      break;\n\n    case 'Right':\n      object.position.z -= 10;\n      object.rotation.y = Math.PI / 2 * 3;\n      break;\n  }\n};\n\nvar render = function render() {\n  if (follow) {\n    setFocus();\n  }\n\n  if (!draw) {\n    (function () {\n      var shouldHandleKeyDown = true;\n\n      document.onkeydown = function (e) {\n        if (!shouldHandleKeyDown) return;\n        shouldHandleKeyDown = false;\n        movePacman(e, pacman);\n      };\n\n      document.onkeyup = function () {\n        shouldHandleKeyDown = true;\n      };\n    })();\n  }\n\n  requestAnimationFrame(render);\n  renderer.render(scene, camera);\n};\n\ninit();\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_js/script.js\n ** module id = 1\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./_js/script.js?");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _Cube2 = __webpack_require__(3);\n\nvar _Cube3 = _interopRequireDefault(_Cube2);\n\nexports.Cube = _Cube3['default'];\n\nvar _Grid2 = __webpack_require__(6);\n\nvar _Grid3 = _interopRequireDefault(_Grid2);\n\nexports.Grid = _Grid3['default'];\n\nvar _Floor2 = __webpack_require__(7);\n\nvar _Floor3 = _interopRequireDefault(_Floor2);\n\nexports.Floor = _Floor3['default'];\n\nvar _Pacman2 = __webpack_require__(8);\n\nvar _Pacman3 = _interopRequireDefault(_Pacman2);\n\nexports.Pacman = _Pacman3['default'];\n\nvar _Coin2 = __webpack_require__(11);\n\nvar _Coin3 = _interopRequireDefault(_Coin2);\n\nexports.Coin = _Coin3['default'];\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_js/svg/index.js\n ** module id = 2\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./_js/svg/index.js?");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar _helpersUtil = __webpack_require__(4);\n\nvar Cube = (function () {\n  function Cube(cubeSize) {\n    _classCallCheck(this, Cube);\n\n    this.cubeSize = cubeSize;\n\n    this.windowSize = { //1140 x 750\n      'width': window.innerWidth,\n      'height': window.innerHeight\n    };\n\n    this.position = {};\n  }\n\n  _createClass(Cube, [{\n    key: '_walls',\n    value: function _walls(i, j) {\n      this.position.x = j;\n      this.position.y = 0;\n      this.position.z = i;\n    }\n  }, {\n    key: '_singleBlock',\n    value: function _singleBlock(pos, xPosGrid, zPosGrid) {\n      this.position.x = (0, _helpersUtil.closest)(pos.x, xPosGrid);\n      this.position.y = 0;\n      this.position.z = Math.ceil((0, _helpersUtil.closest)(pos.z, zPosGrid) - this.windowSize.height / 1000);\n    }\n  }, {\n    key: '_scaleUp',\n    value: function _scaleUp() {\n      var _this = this;\n\n      if (this.scale.y < 20) {\n        this.scale.y++;\n      }\n      requestAnimationFrame(function () {\n        return _this._scaleUp();\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _position = this.position;\n      var x = _position.x;\n      var y = _position.y;\n      var z = _position.z;\n\n      var geometry = new THREE.BoxGeometry(this.cubeSize.width, this.cubeSize.height, this.cubeSize.depth, 5, 5, 5); //laatste 3 parameterz zijn segmenten voor width, height, depth\n      var material = new THREE.MeshLambertMaterial({ color: 0x0000ff, side: THREE.FrontSide });\n\n      var cube = new THREE.Mesh(geometry, material);\n      cube.position.x = x;\n      cube.position.y = y;\n      cube.position.z = z;\n\n      cube.castShadow = true;\n      cube.receiveShadow = true;\n\n      this.scale = cube.scale;\n\n      return cube;\n    }\n  }]);\n\n  return Cube;\n})();\n\nexports['default'] = Cube;\nmodule.exports = exports['default'];\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_js/svg/Cube.js\n ** module id = 3\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./_js/svg/Cube.js?");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\n__webpack_require__(5);\n\nvar randomPos = function randomPos(arr) {\n  return arr[Math.floor(Math.random() * arr.length + 0)];\n};\n\nexports.randomPos = randomPos;\nvar closest = function closest(num, arr) {\n  var curr = arr[0];\n  var diff = Math.abs(num - curr);\n\n  for (var val = 0; val < arr.length; val++) {\n    var newdiff = Math.abs(num - arr[val]);\n\n    if (newdiff < diff) {\n      diff = newdiff;\n      curr = arr[val];\n    }\n  }\n\n  return curr;\n};\n\nexports.closest = closest;\nvar html = function html(strings) {\n  for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  var str = '';\n\n  if (Array.isArray(strings)) {\n    for (var i = 0; i < strings.length; i++) {\n      if (strings[i]) str += strings[i];\n      if (values[i]) str += values[i];\n    }\n  } else {\n    str = strings;\n  }\n\n  var doc = new DOMParser().parseFromString(str.trim(), 'text/html');\n\n  return doc.body.firstChild;\n};\n\nexports.html = html;\nvar prepend = function prepend($parent, $element) {\n  var $first = $parent.children[0];\n  $parent.insertBefore($element, $first);\n};\n\nexports.prepend = prepend;\nvar $ = function $(selector) {\n\n  var result = undefined;\n\n  if (selector === 'body') {\n    return document.body;\n  } else if (selector === 'head') {\n    return document.head;\n  } else if (/^[\\#.]?[\\w-]+$/.test(selector)) {\n\n    if (selector[0] === '#') {\n      return document.getElementById(selector.slice(1));\n    } else if (selector[0] === '.') {\n      result = document.getElementsByClassName(selector.slice(1));\n    } else {\n      result = document.getElementsByTagName(selector);\n    }\n  } else {\n    result = document.querySelectorAll(selector);\n  }\n\n  var elements = [].concat(_toConsumableArray(result));\n  if (elements.length === 1) return elements[0];\n  return elements;\n};\nexports.$ = $;\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_js/helpers/util.js\n ** module id = 4\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./_js/helpers/util.js?");

/***/ },
/* 5 */
/***/ function(module, exports) {

	eval("/*! http://mths.be/array-from v0.2.0 by @mathias */\nif (!Array.from) {\n\t(function() {\n\t\t'use strict';\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements.\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result || function put(object, key, descriptor) {\n\t\t\t\tobject[key] = descriptor.value;\n\t\t\t};\n\t\t}());\n\t\tvar toStr = Object.prototype.toString;\n\t\tvar isCallable = function(fn) {\n\t\t\t// In a perfect world, the `typeof` check would be sufficient. However,\n\t\t\t// in Chrome 1–12, `typeof /x/ == 'object'`, and in IE 6–8\n\t\t\t// `typeof alert == 'object'` and similar for other host objects.\n\t\t\treturn typeof fn == 'function' || toStr.call(fn) == '[object Function]';\n\t\t};\n\t\tvar toInteger = function(value) {\n\t\t\tvar number = Number(value);\n\t\t\tif (isNaN(number)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (number == 0 || !isFinite(number)) {\n\t\t\t\treturn number;\n\t\t\t}\n\t\t\treturn (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n\t\t};\n\t\tvar maxSafeInteger = Math.pow(2, 53) - 1;\n\t\tvar toLength = function(value) {\n\t\t\tvar len = toInteger(value);\n\t\t\treturn Math.min(Math.max(len, 0), maxSafeInteger);\n\t\t};\n\t\tvar from = function(arrayLike) {\n\t\t\tvar C = this;\n\t\t\tif (arrayLike == null) {\n\t\t\t\tthrow new TypeError('`Array.from` requires an array-like object, not `null` or `undefined`');\n\t\t\t}\n\t\t\tvar items = Object(arrayLike);\n\t\t\tvar mapping = arguments.length > 1;\n\n\t\t\tvar mapFn, T;\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tmapFn = arguments[1];\n\t\t\t\tif (!isCallable(mapFn)) {\n\t\t\t\t\tthrow new TypeError('When provided, the second argument to `Array.from` must be a function');\n\t\t\t\t}\n\t\t\t\tif (arguments.length > 2) {\n\t\t\t\t\tT = arguments[2];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar len = toLength(items.length);\n\t\t\tvar A = isCallable(C) ? Object(new C(len)) : new Array(len);\n\t\t\tvar k = 0;\n\t\t\tvar kValue, mappedValue;\n\t\t\twhile (k < len) {\n\t\t\t\tkValue = items[k];\n\t\t\t\tif (mapFn) {\n\t\t\t\t\tmappedValue = typeof T == 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n\t\t\t\t} else {\n\t\t\t\t\tmappedValue = kValue;\n\t\t\t\t}\n\t\t\t\tdefineProperty(A, k, {\n\t\t\t\t\t'value': mappedValue,\n\t\t\t\t\t'configurable': true,\n\t\t\t\t\t'enumerable': true\n\t\t\t\t});\n\t\t\t\t++k;\n\t\t\t}\n\t\t\tA.length = len;\n\t\t\treturn A;\n\t\t};\n\t\tdefineProperty(Array, 'from', {\n\t\t\t'value': from,\n\t\t\t'configurable': true,\n\t\t\t'writable': true\n\t\t});\n\t}());\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/array.from/array-from.js\n ** module id = 5\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./~/array.from/array-from.js?");

/***/ },
/* 6 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar Grid = (function () {\n  function Grid(windowSize) {\n    _classCallCheck(this, Grid);\n\n    this.windowSize = windowSize;\n    this.position = {};\n  }\n\n  _createClass(Grid, [{\n    key: 'changepos',\n    value: function changepos() {\n      var _this = this;\n\n      if (this.position.y > -5) {\n        this.position.y--;\n      }\n      requestAnimationFrame(function () {\n        return _this.changepos();\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var grid = new THREE.GridHelper(this.windowSize.width, 20);\n\n      grid.setColors(0xE30E5C, 0xffffff);\n\n      grid.position.x = 0;\n      grid.position.y = 0;\n      grid.position.z = 0;\n\n      this.position = grid.position;\n\n      this.grid = grid;\n\n      return grid;\n    }\n  }]);\n\n  return Grid;\n})();\n\nexports['default'] = Grid;\nmodule.exports = exports['default'];\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_js/svg/Grid.js\n ** module id = 6\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./_js/svg/Grid.js?");

/***/ },
/* 7 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar Floor = (function () {\n  function Floor(windowSize) {\n    _classCallCheck(this, Floor);\n\n    this.windowSize = windowSize;\n    this.position = {};\n  }\n\n  _createClass(Floor, [{\n    key: 'changepos',\n    value: function changepos() {\n      var _this = this;\n\n      if (this.position.y > -5) {\n        this.position.y--;\n      }\n      requestAnimationFrame(function () {\n        return _this.changepos();\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var floorMaterial = new THREE.MeshLambertMaterial({ color: 0x444444, side: THREE.DoubleSide });\n      var floorGeometry = new THREE.PlaneGeometry(2000, 2000, 10, 10);\n      var floor = new THREE.Mesh(floorGeometry, floorMaterial);\n      floor.position.y = -0.1;\n      floor.rotation.x = Math.PI / 2;\n      floor.receiveShadow = true;\n\n      this.position = floor.position;\n\n      return floor;\n    }\n  }]);\n\n  return Floor;\n})();\n\nexports['default'] = Floor;\nmodule.exports = exports['default'];\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_js/svg/Floor.js\n ** module id = 7\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./_js/svg/Floor.js?");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar ThreeBSP = __webpack_require__(9);\n__webpack_require__(10);\n\nvar Pacman = (function () {\n  function Pacman() {\n    _classCallCheck(this, Pacman);\n\n    this.position = {};\n    this.rotation = {};\n  }\n\n  _createClass(Pacman, [{\n    key: 'render',\n    value: function render() {\n      var sphereGeometry = new THREE.SphereGeometry(8, 50, 50, 0);\n      var sphereMaterial = new THREE.MeshLambertMaterial({ color: 0xffee00, side: THREE.FrontSide });\n      var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n      sphere.geometry.computeVertexNormals();\n\n      sphere.position.y = 0;\n      sphere.position.x = 0;\n      sphere.position.z = 0;\n\n      sphere.castShadow = true;\n      sphere.receiveShadow = true;\n\n      var triangleMaterial = new THREE.MeshLambertMaterial({ color: 0x000000 });\n\n      var shape = new THREE.Shape([new THREE.Vector2(0, 1), new THREE.Vector2(-5, 1), new THREE.Vector2(-2.5, 6)]);\n\n      var v1 = new THREE.Vector3(0, 0, 0);\n      var v2 = new THREE.Vector3(0, 0, 10);\n      var path = new THREE.LineCurve3(v1, v2);\n      var extrudeSettings2 = {\n        bevelEnabled: false,\n        steps: 1,\n        extrudePath: path\n      };\n\n      var geometry2 = new THREE.ExtrudeGeometry(shape, extrudeSettings2);\n      var mesh2 = new THREE.Mesh(geometry2, triangleMaterial);\n      mesh2.position.set(44, 2, -5);\n\n      mesh2.castShadow = true;\n      mesh2.receiveShadow = true;\n\n      var sphereBSP = new ThreeBSP(sphere);\n      var mesh2BSP = new ThreeBSP(mesh2);\n      var subtractBSP = sphereBSP.subtract(mesh2BSP);\n      var pacman = subtractBSP.toMesh(new THREE.MeshLambertMaterial({ color: 0xffee00 }));\n\n      pacman.castShadow = true;\n      pacman.receiveShadow = true;\n\n      this.position = pacman.position;\n      this.rotation = pacman.rotation;\n\n      return pacman;\n    }\n  }]);\n\n  return Pacman;\n})();\n\nexports['default'] = Pacman;\nmodule.exports = exports['default'];\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_js/svg/Pacman.js\n ** module id = 8\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./_js/svg/Pacman.js?");

/***/ },
/* 9 */
/***/ function(module, exports) {

	eval("'use strict';\nvar ThreeBSP,\n\tEPSILON = 1e-5,\n\tCOPLANAR = 0,\n\tFRONT = 1,\n\tBACK = 2,\n\tSPANNING = 3;\n\nThreeBSP = function( geometry ) {\n\t// Convert THREE.Geometry to ThreeBSP\n\tvar i, _length_i,\n\t\tface, vertex, faceVertexUvs, uvs,\n\t\tpolygon,\n\t\tpolygons = [],\n\t\ttree;\n\n\tif ( geometry instanceof THREE.Geometry ) {\n\t\tthis.matrix = new THREE.Matrix4;\n\t} else if ( geometry instanceof THREE.Mesh ) {\n\t\t// #todo: add hierarchy support\n\t\tgeometry.updateMatrix();\n\t\tthis.matrix = geometry.matrix.clone();\n\t\tgeometry = geometry.geometry;\n\t} else if ( geometry instanceof ThreeBSP.Node ) {\n\t\tthis.tree = geometry;\n\t\tthis.matrix = new THREE.Matrix4;\n\t\treturn this;\n\t} else {\n\t\tthrow 'ThreeBSP: Given geometry is unsupported';\n\t}\n\n\tfor ( i = 0, _length_i = geometry.faces.length; i < _length_i; i++ ) {\n\t\tface = geometry.faces[i];\n\t\tfaceVertexUvs = geometry.faceVertexUvs[0][i];\n\t\tpolygon = new ThreeBSP.Polygon;\n\n\t\tif ( face instanceof THREE.Face3 ) {\n\t\t\tvertex = geometry.vertices[ face.a ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[0].x, faceVertexUvs[0].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[0], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\n\t\t\tvertex = geometry.vertices[ face.b ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[1].x, faceVertexUvs[1].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\n\t\t\tvertex = geometry.vertices[ face.c ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[2].x, faceVertexUvs[2].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\t\t} else if ( typeof THREE.Face4 ) {\n\t\t\tvertex = geometry.vertices[ face.a ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[0].x, faceVertexUvs[0].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[0], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\n\t\t\tvertex = geometry.vertices[ face.b ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[1].x, faceVertexUvs[1].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[1], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\n\t\t\tvertex = geometry.vertices[ face.c ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[2].x, faceVertexUvs[2].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[2], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\n\t\t\tvertex = geometry.vertices[ face.d ];\n                            uvs = faceVertexUvs ? new THREE.Vector2( faceVertexUvs[3].x, faceVertexUvs[3].y ) : null;\n                            vertex = new ThreeBSP.Vertex( vertex.x, vertex.y, vertex.z, face.vertexNormals[3], uvs );\n\t\t\tvertex.applyMatrix4(this.matrix);\n\t\t\tpolygon.vertices.push( vertex );\n\t\t} else {\n\t\t\tthrow 'Invalid face type at index ' + i;\n\t\t}\n\n\t\tpolygon.calculateProperties();\n\t\tpolygons.push( polygon );\n\t};\n\n\tthis.tree = new ThreeBSP.Node( polygons );\n};\nThreeBSP.prototype.subtract = function( other_tree ) {\n\tvar a = this.tree.clone(),\n\t\tb = other_tree.tree.clone();\n\n\ta.invert();\n\ta.clipTo( b );\n\tb.clipTo( a );\n\tb.invert();\n\tb.clipTo( a );\n\tb.invert();\n\ta.build( b.allPolygons() );\n\ta.invert();\n\ta = new ThreeBSP( a );\n\ta.matrix = this.matrix;\n\treturn a;\n};\nThreeBSP.prototype.union = function( other_tree ) {\n\tvar a = this.tree.clone(),\n\t\tb = other_tree.tree.clone();\n\n\ta.clipTo( b );\n\tb.clipTo( a );\n\tb.invert();\n\tb.clipTo( a );\n\tb.invert();\n\ta.build( b.allPolygons() );\n\ta = new ThreeBSP( a );\n\ta.matrix = this.matrix;\n\treturn a;\n};\nThreeBSP.prototype.intersect = function( other_tree ) {\n\tvar a = this.tree.clone(),\n\t\tb = other_tree.tree.clone();\n\n\ta.invert();\n\tb.clipTo( a );\n\tb.invert();\n\ta.clipTo( b );\n\tb.clipTo( a );\n\ta.build( b.allPolygons() );\n\ta.invert();\n\ta = new ThreeBSP( a );\n\ta.matrix = this.matrix;\n\treturn a;\n};\nThreeBSP.prototype.toGeometry = function() {\n\tvar i, j,\n\t\tmatrix = new THREE.Matrix4().getInverse( this.matrix ),\n\t\tgeometry = new THREE.Geometry(),\n\t\tpolygons = this.tree.allPolygons(),\n\t\tpolygon_count = polygons.length,\n\t\tpolygon, polygon_vertice_count,\n\t\tvertice_dict = {},\n\t\tvertex_idx_a, vertex_idx_b, vertex_idx_c,\n\t\tvertex, face,\n\t\tverticeUvs;\n\n\tfor ( i = 0; i < polygon_count; i++ ) {\n\t\tpolygon = polygons[i];\n\t\tpolygon_vertice_count = polygon.vertices.length;\n\n\t\tfor ( j = 2; j < polygon_vertice_count; j++ ) {\n\t\t\tverticeUvs = [];\n\n\t\t\tvertex = polygon.vertices[0];\n\t\t\tverticeUvs.push( new THREE.Vector2( vertex.uv.x, vertex.uv.y ) );\n\t\t\tvertex = new THREE.Vector3( vertex.x, vertex.y, vertex.z );\n\t\t\tvertex.applyMatrix4(matrix);\n\n\t\t\tif ( typeof vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] !== 'undefined' ) {\n\t\t\t\tvertex_idx_a = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ];\n\t\t\t} else {\n\t\t\t\tgeometry.vertices.push( vertex );\n\t\t\t\tvertex_idx_a = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] = geometry.vertices.length - 1;\n\t\t\t}\n\n\t\t\tvertex = polygon.vertices[j-1];\n\t\t\tverticeUvs.push( new THREE.Vector2( vertex.uv.x, vertex.uv.y ) );\n\t\t\tvertex = new THREE.Vector3( vertex.x, vertex.y, vertex.z );\n\t\t\tvertex.applyMatrix4(matrix);\n\t\t\tif ( typeof vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] !== 'undefined' ) {\n\t\t\t\tvertex_idx_b = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ];\n\t\t\t} else {\n\t\t\t\tgeometry.vertices.push( vertex );\n\t\t\t\tvertex_idx_b = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] = geometry.vertices.length - 1;\n\t\t\t}\n\n\t\t\tvertex = polygon.vertices[j];\n\t\t\tverticeUvs.push( new THREE.Vector2( vertex.uv.x, vertex.uv.y ) );\n\t\t\tvertex = new THREE.Vector3( vertex.x, vertex.y, vertex.z );\n\t\t\tvertex.applyMatrix4(matrix);\n\t\t\tif ( typeof vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] !== 'undefined' ) {\n\t\t\t\tvertex_idx_c = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ];\n\t\t\t} else {\n\t\t\t\tgeometry.vertices.push( vertex );\n\t\t\t\tvertex_idx_c = vertice_dict[ vertex.x + ',' + vertex.y + ',' + vertex.z ] = geometry.vertices.length - 1;\n\t\t\t}\n\n\t\t\tface = new THREE.Face3(\n\t\t\t\tvertex_idx_a,\n\t\t\t\tvertex_idx_b,\n\t\t\t\tvertex_idx_c,\n\t\t\t\tnew THREE.Vector3( polygon.normal.x, polygon.normal.y, polygon.normal.z )\n\t\t\t);\n\n\t\t\tgeometry.faces.push( face );\n\t\t\tgeometry.faceVertexUvs[0].push( verticeUvs );\n\t\t}\n\n\t}\n\treturn geometry;\n};\nThreeBSP.prototype.toMesh = function( material ) {\n\tvar geometry = this.toGeometry(),\n\t\tmesh = new THREE.Mesh( geometry, material );\n\n\tmesh.position.setFromMatrixPosition( this.matrix );\n\tmesh.rotation.setFromRotationMatrix( this.matrix );\n\n\treturn mesh;\n};\n\n\nThreeBSP.Polygon = function( vertices, normal, w ) {\n\tif ( !( vertices instanceof Array ) ) {\n\t\tvertices = [];\n\t}\n\n\tthis.vertices = vertices;\n\tif ( vertices.length > 0 ) {\n\t\tthis.calculateProperties();\n\t} else {\n\t\tthis.normal = this.w = undefined;\n\t}\n};\nThreeBSP.Polygon.prototype.calculateProperties = function() {\n\tvar a = this.vertices[0],\n\t\tb = this.vertices[1],\n\t\tc = this.vertices[2];\n\n\tthis.normal = b.clone().subtract( a ).cross(\n\t\tc.clone().subtract( a )\n\t).normalize();\n\n\tthis.w = this.normal.clone().dot( a );\n\n\treturn this;\n};\nThreeBSP.Polygon.prototype.clone = function() {\n\tvar i, vertice_count,\n\t\tpolygon = new ThreeBSP.Polygon;\n\n\tfor ( i = 0, vertice_count = this.vertices.length; i < vertice_count; i++ ) {\n\t\tpolygon.vertices.push( this.vertices[i].clone() );\n\t};\n\tpolygon.calculateProperties();\n\n\treturn polygon;\n};\n\nThreeBSP.Polygon.prototype.flip = function() {\n\tvar i, vertices = [];\n\n\tthis.normal.multiplyScalar( -1 );\n\tthis.w *= -1;\n\n\tfor ( i = this.vertices.length - 1; i >= 0; i-- ) {\n\t\tvertices.push( this.vertices[i] );\n\t};\n\tthis.vertices = vertices;\n\n\treturn this;\n};\nThreeBSP.Polygon.prototype.classifyVertex = function( vertex ) {\n\tvar side_value = this.normal.dot( vertex ) - this.w;\n\n\tif ( side_value < -EPSILON ) {\n\t\treturn BACK;\n\t} else if ( side_value > EPSILON ) {\n\t\treturn FRONT;\n\t} else {\n\t\treturn COPLANAR;\n\t}\n};\nThreeBSP.Polygon.prototype.classifySide = function( polygon ) {\n\tvar i, vertex, classification,\n\t\tnum_positive = 0,\n\t\tnum_negative = 0,\n\t\tvertice_count = polygon.vertices.length;\n\n\tfor ( i = 0; i < vertice_count; i++ ) {\n\t\tvertex = polygon.vertices[i];\n\t\tclassification = this.classifyVertex( vertex );\n\t\tif ( classification === FRONT ) {\n\t\t\tnum_positive++;\n\t\t} else if ( classification === BACK ) {\n\t\t\tnum_negative++;\n\t\t}\n\t}\n\n\tif ( num_positive > 0 && num_negative === 0 ) {\n\t\treturn FRONT;\n\t} else if ( num_positive === 0 && num_negative > 0 ) {\n\t\treturn BACK;\n\t} else if ( num_positive === 0 && num_negative === 0 ) {\n\t\treturn COPLANAR;\n\t} else {\n\t\treturn SPANNING;\n\t}\n};\nThreeBSP.Polygon.prototype.splitPolygon = function( polygon, coplanar_front, coplanar_back, front, back ) {\n\tvar classification = this.classifySide( polygon );\n\n\tif ( classification === COPLANAR ) {\n\n\t\t( this.normal.dot( polygon.normal ) > 0 ? coplanar_front : coplanar_back ).push( polygon );\n\n\t} else if ( classification === FRONT ) {\n\n\t\tfront.push( polygon );\n\n\t} else if ( classification === BACK ) {\n\n\t\tback.push( polygon );\n\n\t} else {\n\n\t\tvar vertice_count,\n\t\t\ti, j, ti, tj, vi, vj,\n\t\t\tt, v,\n\t\t\tf = [],\n\t\t\tb = [];\n\n\t\tfor ( i = 0, vertice_count = polygon.vertices.length; i < vertice_count; i++ ) {\n\n\t\t\tj = (i + 1) % vertice_count;\n\t\t\tvi = polygon.vertices[i];\n\t\t\tvj = polygon.vertices[j];\n\t\t\tti = this.classifyVertex( vi );\n\t\t\ttj = this.classifyVertex( vj );\n\n\t\t\tif ( ti != BACK ) f.push( vi );\n\t\t\tif ( ti != FRONT ) b.push( vi );\n\t\t\tif ( (ti | tj) === SPANNING ) {\n\t\t\t\tt = ( this.w - this.normal.dot( vi ) ) / this.normal.dot( vj.clone().subtract( vi ) );\n\t\t\t\tv = vi.interpolate( vj, t );\n\t\t\t\tf.push( v );\n\t\t\t\tb.push( v );\n\t\t\t}\n\t\t}\n\n\n\t\tif ( f.length >= 3 ) front.push( new ThreeBSP.Polygon( f ).calculateProperties() );\n\t\tif ( b.length >= 3 ) back.push( new ThreeBSP.Polygon( b ).calculateProperties() );\n\t}\n};\n\nThreeBSP.Vertex = function( x, y, z, normal, uv ) {\n\tthis.x = x;\n\tthis.y = y;\n\tthis.z = z;\n\tthis.normal = normal || new THREE.Vector3;\n\tthis.uv = uv || new THREE.Vector2;\n};\nThreeBSP.Vertex.prototype.clone = function() {\n\treturn new ThreeBSP.Vertex( this.x, this.y, this.z, this.normal.clone(), this.uv.clone() );\n};\nThreeBSP.Vertex.prototype.add = function( vertex ) {\n\tthis.x += vertex.x;\n\tthis.y += vertex.y;\n\tthis.z += vertex.z;\n\treturn this;\n};\nThreeBSP.Vertex.prototype.subtract = function( vertex ) {\n\tthis.x -= vertex.x;\n\tthis.y -= vertex.y;\n\tthis.z -= vertex.z;\n\treturn this;\n};\nThreeBSP.Vertex.prototype.multiplyScalar = function( scalar ) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\tthis.z *= scalar;\n\treturn this;\n};\nThreeBSP.Vertex.prototype.cross = function( vertex ) {\n\tvar x = this.x,\n\t\ty = this.y,\n\t\tz = this.z;\n\n\tthis.x = y * vertex.z - z * vertex.y;\n\tthis.y = z * vertex.x - x * vertex.z;\n\tthis.z = x * vertex.y - y * vertex.x;\n\n\treturn this;\n};\nThreeBSP.Vertex.prototype.normalize = function() {\n\tvar length = Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\tthis.x /= length;\n\tthis.y /= length;\n\tthis.z /= length;\n\n\treturn this;\n};\nThreeBSP.Vertex.prototype.dot = function( vertex ) {\n\treturn this.x * vertex.x + this.y * vertex.y + this.z * vertex.z;\n};\nThreeBSP.Vertex.prototype.lerp = function( a, t ) {\n\tthis.add(\n\t\ta.clone().subtract( this ).multiplyScalar( t )\n\t);\n\n\tthis.normal.add(\n\t\ta.normal.clone().sub( this.normal ).multiplyScalar( t )\n\t);\n\n\tthis.uv.add(\n\t\ta.uv.clone().sub( this.uv ).multiplyScalar( t )\n\t);\n\n\treturn this;\n};\nThreeBSP.Vertex.prototype.interpolate = function( other, t ) {\n\treturn this.clone().lerp( other, t );\n};\nThreeBSP.Vertex.prototype.applyMatrix4 = function ( m ) {\n\n\t// input: THREE.Matrix4 affine matrix\n\n\tvar x = this.x, y = this.y, z = this.z;\n\n\tvar e = m.elements;\n\n\tthis.x = e[0] * x + e[4] * y + e[8]  * z + e[12];\n\tthis.y = e[1] * x + e[5] * y + e[9]  * z + e[13];\n\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14];\n\n\treturn this;\n\n}\n\n\nThreeBSP.Node = function( polygons ) {\n\tvar i, polygon_count,\n\t\tfront = [],\n\t\tback = [];\n\n\tthis.polygons = [];\n\tthis.front = this.back = undefined;\n\n\tif ( !(polygons instanceof Array) || polygons.length === 0 ) return;\n\n\tthis.divider = polygons[0].clone();\n\n\tfor ( i = 0, polygon_count = polygons.length; i < polygon_count; i++ ) {\n\t\tthis.divider.splitPolygon( polygons[i], this.polygons, this.polygons, front, back );\n\t}\n\n\tif ( front.length > 0 ) {\n\t\tthis.front = new ThreeBSP.Node( front );\n\t}\n\n\tif ( back.length > 0 ) {\n\t\tthis.back = new ThreeBSP.Node( back );\n\t}\n};\nThreeBSP.Node.isConvex = function( polygons ) {\n\tvar i, j;\n\tfor ( i = 0; i < polygons.length; i++ ) {\n\t\tfor ( j = 0; j < polygons.length; j++ ) {\n\t\t\tif ( i !== j && polygons[i].classifySide( polygons[j] ) !== BACK ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n};\nThreeBSP.Node.prototype.build = function( polygons ) {\n\tvar i, polygon_count,\n\t\tfront = [],\n\t\tback = [];\n\n\tif ( !this.divider ) {\n\t\tthis.divider = polygons[0].clone();\n\t}\n\n\tfor ( i = 0, polygon_count = polygons.length; i < polygon_count; i++ ) {\n\t\tthis.divider.splitPolygon( polygons[i], this.polygons, this.polygons, front, back );\n\t}\n\n\tif ( front.length > 0 ) {\n\t\tif ( !this.front ) this.front = new ThreeBSP.Node();\n\t\tthis.front.build( front );\n\t}\n\n\tif ( back.length > 0 ) {\n\t\tif ( !this.back ) this.back = new ThreeBSP.Node();\n\t\tthis.back.build( back );\n\t}\n};\nThreeBSP.Node.prototype.allPolygons = function() {\n\tvar polygons = this.polygons.slice();\n\tif ( this.front ) polygons = polygons.concat( this.front.allPolygons() );\n\tif ( this.back ) polygons = polygons.concat( this.back.allPolygons() );\n\treturn polygons;\n};\nThreeBSP.Node.prototype.clone = function() {\n\tvar node = new ThreeBSP.Node();\n\n\tnode.divider = this.divider.clone();\n\tnode.polygons = this.polygons.map( function( polygon ) { return polygon.clone(); } );\n\tnode.front = this.front && this.front.clone();\n\tnode.back = this.back && this.back.clone();\n\n\treturn node;\n};\nThreeBSP.Node.prototype.invert = function() {\n\tvar i, polygon_count, temp;\n\n\tfor ( i = 0, polygon_count = this.polygons.length; i < polygon_count; i++ ) {\n\t\tthis.polygons[i].flip();\n\t}\n\n\tthis.divider.flip();\n\tif ( this.front ) this.front.invert();\n\tif ( this.back ) this.back.invert();\n\n\ttemp = this.front;\n\tthis.front = this.back;\n\tthis.back = temp;\n\n\treturn this;\n};\nThreeBSP.Node.prototype.clipPolygons = function( polygons ) {\n\tvar i, polygon_count,\n\t\tfront, back;\n\n\tif ( !this.divider ) return polygons.slice();\n\n\tfront = [], back = [];\n\n\tfor ( i = 0, polygon_count = polygons.length; i < polygon_count; i++ ) {\n\t\tthis.divider.splitPolygon( polygons[i], front, back, front, back );\n\t}\n\n\tif ( this.front ) front = this.front.clipPolygons( front );\n\tif ( this.back ) back = this.back.clipPolygons( back );\n\telse back = [];\n\n\treturn front.concat( back );\n};\n\nThreeBSP.Node.prototype.clipTo = function( node ) {\n\tthis.polygons = node.clipPolygons( this.polygons );\n\tif ( this.front ) this.front.clipTo( node );\n\tif ( this.back ) this.back.clipTo( node );\n};\n\n\nmodule.exports = ThreeBSP;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-csg/index.js\n ** module id = 9\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./~/three-csg/index.js?");

/***/ },
/* 10 */
/***/ function(module, exports) {

	eval("// Constructive Solid Geometry (CSG) is a modeling technique that uses Boolean\n// operations like union and intersection to combine 3D solids. This library\n// implements CSG operations on meshes elegantly and concisely using BSP trees,\n// and is meant to serve as an easily understandable implementation of the\n// algorithm. All edge cases involving overlapping coplanar polygons in both\n// solids are correctly handled.\n// \n// Example usage:\n// \n//     var cube = CSG.cube();\n//     var sphere = CSG.sphere({ radius: 1.3 });\n//     var polygons = cube.subtract(sphere).toPolygons();\n// \n// ## Implementation Details\n// \n// All CSG operations are implemented in terms of two functions, `clipTo()` and\n// `invert()`, which remove parts of a BSP tree inside another BSP tree and swap\n// solid and empty space, respectively. To find the union of `a` and `b`, we\n// want to remove everything in `a` inside `b` and everything in `b` inside `a`,\n// then combine polygons from `a` and `b` into one solid:\n// \n//     a.clipTo(b);\n//     b.clipTo(a);\n//     a.build(b.allPolygons());\n// \n// The only tricky part is handling overlapping coplanar polygons in both trees.\n// The code above keeps both copies, but we need to keep them in one tree and\n// remove them in the other tree. To remove them from `b` we can clip the\n// inverse of `b` against `a`. The code for union now looks like this:\n// \n//     a.clipTo(b);\n//     b.clipTo(a);\n//     b.invert();\n//     b.clipTo(a);\n//     b.invert();\n//     a.build(b.allPolygons());\n// \n// Subtraction and intersection naturally follow from set operations. If\n// union is `A | B`, subtraction is `A - B = ~(~A | B)` and intersection is\n// `A & B = ~(~A | ~B)` where `~` is the complement operator.\n// \n// ## License\n// \n// Copyright (c) 2011 Evan Wallace (http://madebyevan.com/), under the MIT license.\n\n// # class CSG\n\n// Holds a binary space partition tree representing a 3D solid. Two solids can\n// be combined using the `union()`, `subtract()`, and `intersect()` methods.\n\nCSG = function() {\n  this.polygons = [];\n};\n\n// Construct a CSG solid from a list of `CSG.Polygon` instances.\nCSG.fromPolygons = function(polygons) {\n  var csg = new CSG();\n  csg.polygons = polygons;\n  return csg;\n};\n\nCSG.prototype = {\n  clone: function() {\n    var csg = new CSG();\n    csg.polygons = this.polygons.map(function(p) { return p.clone(); });\n    return csg;\n  },\n\n  toPolygons: function() {\n    return this.polygons;\n  },\n\n  // Return a new CSG solid representing space in either this solid or in the\n  // solid `csg`. Neither this solid nor the solid `csg` are modified.\n  // \n  //     A.union(B)\n  // \n  //     +-------+            +-------+\n  //     |       |            |       |\n  //     |   A   |            |       |\n  //     |    +--+----+   =   |       +----+\n  //     +----+--+    |       +----+       |\n  //          |   B   |            |       |\n  //          |       |            |       |\n  //          +-------+            +-------+\n  // \n  union: function(csg) {\n    var a = new CSG.Node(this.clone().polygons);\n    var b = new CSG.Node(csg.clone().polygons);\n    a.clipTo(b);\n    b.clipTo(a);\n    b.invert();\n    b.clipTo(a);\n    b.invert();\n    a.build(b.allPolygons());\n    return CSG.fromPolygons(a.allPolygons());\n  },\n\n  // Return a new CSG solid representing space in this solid but not in the\n  // solid `csg`. Neither this solid nor the solid `csg` are modified.\n  // \n  //     A.subtract(B)\n  // \n  //     +-------+            +-------+\n  //     |       |            |       |\n  //     |   A   |            |       |\n  //     |    +--+----+   =   |    +--+\n  //     +----+--+    |       +----+\n  //          |   B   |\n  //          |       |\n  //          +-------+\n  // \n  subtract: function(csg) {\n    var a = new CSG.Node(this.clone().polygons);\n    var b = new CSG.Node(csg.clone().polygons);\n    a.invert();\n    a.clipTo(b);\n    b.clipTo(a);\n    b.invert();\n    b.clipTo(a);\n    b.invert();\n    a.build(b.allPolygons());\n    a.invert();\n    return CSG.fromPolygons(a.allPolygons());\n  },\n\n  // Return a new CSG solid representing space both this solid and in the\n  // solid `csg`. Neither this solid nor the solid `csg` are modified.\n  // \n  //     A.intersect(B)\n  // \n  //     +-------+\n  //     |       |\n  //     |   A   |\n  //     |    +--+----+   =   +--+\n  //     +----+--+    |       +--+\n  //          |   B   |\n  //          |       |\n  //          +-------+\n  // \n  intersect: function(csg) {\n    var a = new CSG.Node(this.clone().polygons);\n    var b = new CSG.Node(csg.clone().polygons);\n    a.invert();\n    b.clipTo(a);\n    b.invert();\n    a.clipTo(b);\n    b.clipTo(a);\n    a.build(b.allPolygons());\n    a.invert();\n    return CSG.fromPolygons(a.allPolygons());\n  },\n\n  // Return a new CSG solid with solid and empty space switched. This solid is\n  // not modified.\n  inverse: function() {\n    var csg = this.clone();\n    csg.polygons.map(function(p) { p.flip(); });\n    return csg;\n  }\n};\n\n// Construct an axis-aligned solid cuboid. Optional parameters are `center` and\n// `radius`, which default to `[0, 0, 0]` and `[1, 1, 1]`. The radius can be\n// specified using a single number or a list of three numbers, one for each axis.\n// \n// Example code:\n// \n//     var cube = CSG.cube({\n//       center: [0, 0, 0],\n//       radius: 1\n//     });\nCSG.cube = function(options) {\n  options = options || {};\n  var c = new CSG.Vector(options.center || [0, 0, 0]);\n  var r = !options.radius ? [1, 1, 1] : options.radius.length ?\n           options.radius : [options.radius, options.radius, options.radius];\n  return CSG.fromPolygons([\n    [[0, 4, 6, 2], [-1, 0, 0]],\n    [[1, 3, 7, 5], [+1, 0, 0]],\n    [[0, 1, 5, 4], [0, -1, 0]],\n    [[2, 6, 7, 3], [0, +1, 0]],\n    [[0, 2, 3, 1], [0, 0, -1]],\n    [[4, 5, 7, 6], [0, 0, +1]]\n  ].map(function(info) {\n    return new CSG.Polygon(info[0].map(function(i) {\n      var pos = new CSG.Vector(\n        c.x + r[0] * (2 * !!(i & 1) - 1),\n        c.y + r[1] * (2 * !!(i & 2) - 1),\n        c.z + r[2] * (2 * !!(i & 4) - 1)\n      );\n      return new CSG.Vertex(pos, new CSG.Vector(info[1]));\n    }));\n  }));\n};\n\n// Construct a solid sphere. Optional parameters are `center`, `radius`,\n// `slices`, and `stacks`, which default to `[0, 0, 0]`, `1`, `16`, and `8`.\n// The `slices` and `stacks` parameters control the tessellation along the\n// longitude and latitude directions.\n// \n// Example usage:\n// \n//     var sphere = CSG.sphere({\n//       center: [0, 0, 0],\n//       radius: 1,\n//       slices: 16,\n//       stacks: 8\n//     });\nCSG.sphere = function(options) {\n  options = options || {};\n  var c = new CSG.Vector(options.center || [0, 0, 0]);\n  var r = options.radius || 1;\n  var slices = options.slices || 16;\n  var stacks = options.stacks || 8;\n  var polygons = [], vertices;\n  function vertex(theta, phi) {\n    theta *= Math.PI * 2;\n    phi *= Math.PI;\n    var dir = new CSG.Vector(\n      Math.cos(theta) * Math.sin(phi),\n      Math.cos(phi),\n      Math.sin(theta) * Math.sin(phi)\n    );\n    vertices.push(new CSG.Vertex(c.plus(dir.times(r)), dir));\n  }\n  for (var i = 0; i < slices; i++) {\n    for (var j = 0; j < stacks; j++) {\n      vertices = [];\n      vertex(i / slices, j / stacks);\n      if (j > 0) vertex((i + 1) / slices, j / stacks);\n      if (j < stacks - 1) vertex((i + 1) / slices, (j + 1) / stacks);\n      vertex(i / slices, (j + 1) / stacks);\n      polygons.push(new CSG.Polygon(vertices));\n    }\n  }\n  return CSG.fromPolygons(polygons);\n};\n\n// Construct a solid cylinder. Optional parameters are `start`, `end`,\n// `radius`, and `slices`, which default to `[0, -1, 0]`, `[0, 1, 0]`, `1`, and\n// `16`. The `slices` parameter controls the tessellation.\n// \n// Example usage:\n// \n//     var cylinder = CSG.cylinder({\n//       start: [0, -1, 0],\n//       end: [0, 1, 0],\n//       radius: 1,\n//       slices: 16\n//     });\nCSG.cylinder = function(options) {\n  options = options || {};\n  var s = new CSG.Vector(options.start || [0, -1, 0]);\n  var e = new CSG.Vector(options.end || [0, 1, 0]);\n  var ray = e.minus(s);\n  var r = options.radius || 1;\n  var slices = options.slices || 16;\n  var axisZ = ray.unit(), isY = (Math.abs(axisZ.y) > 0.5);\n  var axisX = new CSG.Vector(isY, !isY, 0).cross(axisZ).unit();\n  var axisY = axisX.cross(axisZ).unit();\n  var start = new CSG.Vertex(s, axisZ.negated());\n  var end = new CSG.Vertex(e, axisZ.unit());\n  var polygons = [];\n  function point(stack, slice, normalBlend) {\n    var angle = slice * Math.PI * 2;\n    var out = axisX.times(Math.cos(angle)).plus(axisY.times(Math.sin(angle)));\n    var pos = s.plus(ray.times(stack)).plus(out.times(r));\n    var normal = out.times(1 - Math.abs(normalBlend)).plus(axisZ.times(normalBlend));\n    return new CSG.Vertex(pos, normal);\n  }\n  for (var i = 0; i < slices; i++) {\n    var t0 = i / slices, t1 = (i + 1) / slices;\n    polygons.push(new CSG.Polygon([start, point(0, t0, -1), point(0, t1, -1)]));\n    polygons.push(new CSG.Polygon([point(0, t1, 0), point(0, t0, 0), point(1, t0, 0), point(1, t1, 0)]));\n    polygons.push(new CSG.Polygon([end, point(1, t1, 1), point(1, t0, 1)]));\n  }\n  return CSG.fromPolygons(polygons);\n};\n\n// # class Vector\n\n// Represents a 3D vector.\n// \n// Example usage:\n// \n//     new CSG.Vector(1, 2, 3);\n//     new CSG.Vector([1, 2, 3]);\n//     new CSG.Vector({ x: 1, y: 2, z: 3 });\n\nCSG.Vector = function(x, y, z) {\n  if (arguments.length == 3) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  } else if ('x' in x) {\n    this.x = x.x;\n    this.y = x.y;\n    this.z = x.z;\n  } else {\n    this.x = x[0];\n    this.y = x[1];\n    this.z = x[2];\n  }\n};\n\nCSG.Vector.prototype = {\n  clone: function() {\n    return new CSG.Vector(this.x, this.y, this.z);\n  },\n\n  negated: function() {\n    return new CSG.Vector(-this.x, -this.y, -this.z);\n  },\n\n  plus: function(a) {\n    return new CSG.Vector(this.x + a.x, this.y + a.y, this.z + a.z);\n  },\n\n  minus: function(a) {\n    return new CSG.Vector(this.x - a.x, this.y - a.y, this.z - a.z);\n  },\n\n  times: function(a) {\n    return new CSG.Vector(this.x * a, this.y * a, this.z * a);\n  },\n\n  dividedBy: function(a) {\n    return new CSG.Vector(this.x / a, this.y / a, this.z / a);\n  },\n\n  dot: function(a) {\n    return this.x * a.x + this.y * a.y + this.z * a.z;\n  },\n\n  lerp: function(a, t) {\n    return this.plus(a.minus(this).times(t));\n  },\n\n  length: function() {\n    return Math.sqrt(this.dot(this));\n  },\n\n  unit: function() {\n    return this.dividedBy(this.length());\n  },\n\n  cross: function(a) {\n    return new CSG.Vector(\n      this.y * a.z - this.z * a.y,\n      this.z * a.x - this.x * a.z,\n      this.x * a.y - this.y * a.x\n    );\n  }\n};\n\n// # class Vertex\n\n// Represents a vertex of a polygon. Use your own vertex class instead of this\n// one to provide additional features like texture coordinates and vertex\n// colors. Custom vertex classes need to provide a `pos` property and `clone()`,\n// `flip()`, and `interpolate()` methods that behave analogous to the ones\n// defined by `CSG.Vertex`. This class provides `normal` so convenience\n// functions like `CSG.sphere()` can return a smooth vertex normal, but `normal`\n// is not used anywhere else.\n\nCSG.Vertex = function(pos, normal) {\n  this.pos = new CSG.Vector(pos);\n  this.normal = new CSG.Vector(normal);\n};\n\nCSG.Vertex.prototype = {\n  clone: function() {\n    return new CSG.Vertex(this.pos.clone(), this.normal.clone());\n  },\n\n  // Invert all orientation-specific data (e.g. vertex normal). Called when the\n  // orientation of a polygon is flipped.\n  flip: function() {\n    this.normal = this.normal.negated();\n  },\n\n  // Create a new vertex between this vertex and `other` by linearly\n  // interpolating all properties using a parameter of `t`. Subclasses should\n  // override this to interpolate additional properties.\n  interpolate: function(other, t) {\n    return new CSG.Vertex(\n      this.pos.lerp(other.pos, t),\n      this.normal.lerp(other.normal, t)\n    );\n  }\n};\n\n// # class Plane\n\n// Represents a plane in 3D space.\n\nCSG.Plane = function(normal, w) {\n  this.normal = normal;\n  this.w = w;\n};\n\n// `CSG.Plane.EPSILON` is the tolerance used by `splitPolygon()` to decide if a\n// point is on the plane.\nCSG.Plane.EPSILON = 1e-5;\n\nCSG.Plane.fromPoints = function(a, b, c) {\n  var n = b.minus(a).cross(c.minus(a)).unit();\n  return new CSG.Plane(n, n.dot(a));\n};\n\nCSG.Plane.prototype = {\n  clone: function() {\n    return new CSG.Plane(this.normal.clone(), this.w);\n  },\n\n  flip: function() {\n    this.normal = this.normal.negated();\n    this.w = -this.w;\n  },\n\n  // Split `polygon` by this plane if needed, then put the polygon or polygon\n  // fragments in the appropriate lists. Coplanar polygons go into either\n  // `coplanarFront` or `coplanarBack` depending on their orientation with\n  // respect to this plane. Polygons in front or in back of this plane go into\n  // either `front` or `back`.\n  splitPolygon: function(polygon, coplanarFront, coplanarBack, front, back) {\n    var COPLANAR = 0;\n    var FRONT = 1;\n    var BACK = 2;\n    var SPANNING = 3;\n\n    // Classify each point as well as the entire polygon into one of the above\n    // four classes.\n    var polygonType = 0;\n    var types = [];\n    for (var i = 0; i < polygon.vertices.length; i++) {\n      var t = this.normal.dot(polygon.vertices[i].pos) - this.w;\n      var type = (t < -CSG.Plane.EPSILON) ? BACK : (t > CSG.Plane.EPSILON) ? FRONT : COPLANAR;\n      polygonType |= type;\n      types.push(type);\n    }\n\n    // Put the polygon in the correct list, splitting it when necessary.\n    switch (polygonType) {\n      case COPLANAR:\n        (this.normal.dot(polygon.plane.normal) > 0 ? coplanarFront : coplanarBack).push(polygon);\n        break;\n      case FRONT:\n        front.push(polygon);\n        break;\n      case BACK:\n        back.push(polygon);\n        break;\n      case SPANNING:\n        var f = [], b = [];\n        for (var i = 0; i < polygon.vertices.length; i++) {\n          var j = (i + 1) % polygon.vertices.length;\n          var ti = types[i], tj = types[j];\n          var vi = polygon.vertices[i], vj = polygon.vertices[j];\n          if (ti != BACK) f.push(vi);\n          if (ti != FRONT) b.push(ti != BACK ? vi.clone() : vi);\n          if ((ti | tj) == SPANNING) {\n            var t = (this.w - this.normal.dot(vi.pos)) / this.normal.dot(vj.pos.minus(vi.pos));\n            var v = vi.interpolate(vj, t);\n            f.push(v);\n            b.push(v.clone());\n          }\n        }\n        if (f.length >= 3) front.push(new CSG.Polygon(f, polygon.shared));\n        if (b.length >= 3) back.push(new CSG.Polygon(b, polygon.shared));\n        break;\n    }\n  }\n};\n\n// # class Polygon\n\n// Represents a convex polygon. The vertices used to initialize a polygon must\n// be coplanar and form a convex loop. They do not have to be `CSG.Vertex`\n// instances but they must behave similarly (duck typing can be used for\n// customization).\n// \n// Each convex polygon has a `shared` property, which is shared between all\n// polygons that are clones of each other or were split from the same polygon.\n// This can be used to define per-polygon properties (such as surface color).\n\nCSG.Polygon = function(vertices, shared) {\n  this.vertices = vertices;\n  this.shared = shared;\n  this.plane = CSG.Plane.fromPoints(vertices[0].pos, vertices[1].pos, vertices[2].pos);\n};\n\nCSG.Polygon.prototype = {\n  clone: function() {\n    var vertices = this.vertices.map(function(v) { return v.clone(); });\n    return new CSG.Polygon(vertices, this.shared);\n  },\n\n  flip: function() {\n    this.vertices.reverse().map(function(v) { v.flip(); });\n    this.plane.flip();\n  }\n};\n\n// # class Node\n\n// Holds a node in a BSP tree. A BSP tree is built from a collection of polygons\n// by picking a polygon to split along. That polygon (and all other coplanar\n// polygons) are added directly to that node and the other polygons are added to\n// the front and/or back subtrees. This is not a leafy BSP tree since there is\n// no distinction between internal and leaf nodes.\n\nCSG.Node = function(polygons) {\n  this.plane = null;\n  this.front = null;\n  this.back = null;\n  this.polygons = [];\n  if (polygons) this.build(polygons);\n};\n\nCSG.Node.prototype = {\n  clone: function() {\n    var node = new CSG.Node();\n    node.plane = this.plane && this.plane.clone();\n    node.front = this.front && this.front.clone();\n    node.back = this.back && this.back.clone();\n    node.polygons = this.polygons.map(function(p) { return p.clone(); });\n    return node;\n  },\n\n  // Convert solid space to empty space and empty space to solid space.\n  invert: function() {\n    for (var i = 0; i < this.polygons.length; i++) {\n      this.polygons[i].flip();\n    }\n    this.plane.flip();\n    if (this.front) this.front.invert();\n    if (this.back) this.back.invert();\n    var temp = this.front;\n    this.front = this.back;\n    this.back = temp;\n  },\n\n  // Recursively remove all polygons in `polygons` that are inside this BSP\n  // tree.\n  clipPolygons: function(polygons) {\n    if (!this.plane) return polygons.slice();\n    var front = [], back = [];\n    for (var i = 0; i < polygons.length; i++) {\n      this.plane.splitPolygon(polygons[i], front, back, front, back);\n    }\n    if (this.front) front = this.front.clipPolygons(front);\n    if (this.back) back = this.back.clipPolygons(back);\n    else back = [];\n    return front.concat(back);\n  },\n\n  // Remove all polygons in this BSP tree that are inside the other BSP tree\n  // `bsp`.\n  clipTo: function(bsp) {\n    this.polygons = bsp.clipPolygons(this.polygons);\n    if (this.front) this.front.clipTo(bsp);\n    if (this.back) this.back.clipTo(bsp);\n  },\n\n  // Return a list of all polygons in this BSP tree.\n  allPolygons: function() {\n    var polygons = this.polygons.slice();\n    if (this.front) polygons = polygons.concat(this.front.allPolygons());\n    if (this.back) polygons = polygons.concat(this.back.allPolygons());\n    return polygons;\n  },\n\n  // Build a BSP tree out of `polygons`. When called on an existing tree, the\n  // new polygons are filtered down to the bottom of the tree and become new\n  // nodes there. Each set of polygons is partitioned using the first polygon\n  // (no heuristic is used to pick a good split).\n  build: function(polygons) {\n    if (!polygons.length) return;\n    if (!this.plane) this.plane = polygons[0].plane.clone();\n    var front = [], back = [];\n    for (var i = 0; i < polygons.length; i++) {\n      this.plane.splitPolygon(polygons[i], this.polygons, this.polygons, front, back);\n    }\n    if (front.length) {\n      if (!this.front) this.front = new CSG.Node();\n      this.front.build(front);\n    }\n    if (back.length) {\n      if (!this.back) this.back = new CSG.Node();\n      this.back.build(back);\n    }\n  }\n};\n\nmodule.exports = CSG;\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/csg/csg.js\n ** module id = 10\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./~/csg/csg.js?");

/***/ },
/* 11 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar Coin = (function () {\n  function Coin(xPos, zPos) {\n    _classCallCheck(this, Coin);\n\n    this.position = {\n      x: xPos,\n      y: 1.5,\n      z: zPos\n    };\n  }\n\n  _createClass(Coin, [{\n    key: 'render',\n    value: function render() {\n      var _position = this.position;\n      var x = _position.x;\n      var y = _position.y;\n      var z = _position.z;\n\n      var geometry = new THREE.SphereGeometry(4, 10, 10, 0);\n      var material = new THREE.MeshLambertMaterial({ color: 0xC79477, side: THREE.FrontSide });\n\n      var coin = new THREE.Mesh(geometry, material);\n\n      coin.castShadow = true;\n      coin.receiveShadow = true;\n\n      coin.position.x = x;\n      coin.position.y = y;\n      coin.position.z = z;\n\n      this.coin = coin;\n\n      return coin;\n    }\n  }]);\n\n  return Coin;\n})();\n\nexports['default'] = Coin;\nmodule.exports = exports['default'];\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_js/svg/Coin.js\n ** module id = 11\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./_js/svg/Coin.js?");

/***/ },
/* 12 */
/***/ function(module, exports) {

	eval("module.exports = function(THREE) {\n\tvar MOUSE = THREE.MOUSE\n\tif (!MOUSE)\n\t\tMOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\n\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\t/*global THREE, console */\n\n\tfunction OrbitConstraint ( object ) {\n\n\t\tthis.object = object;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\t// and where it pans with respect to.\n\t\tthis.target = new THREE.Vector3();\n\n\t\t// Limits to how far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// Limits to how far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\n\t\t////////////\n\t\t// internals\n\n\t\tvar scope = this;\n\n\t\tvar EPS = 0.000001;\n\n\t\t// Current position in spherical coordinate system.\n\t\tvar theta;\n\t\tvar phi;\n\n\t\t// Pending changes\n\t\tvar phiDelta = 0;\n\t\tvar thetaDelta = 0;\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\n\t\t// API\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn phi;\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn theta;\n\n\t\t};\n\n\t\tthis.rotateLeft = function ( angle ) {\n\n\t\t\tthetaDelta -= angle;\n\n\t\t};\n\n\t\tthis.rotateUp = function ( angle ) {\n\n\t\t\tphiDelta -= angle;\n\n\t\t};\n\n\t\t// pass in distance in world space to move left\n\t\tthis.panLeft = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panLeft ( distance ) {\n\n\t\t\t\tvar te = this.object.matrix.elements;\n\n\t\t\t\t// get X column of matrix\n\t\t\t\tv.set( te[ 0 ], te[ 1 ], te[ 2 ] );\n\t\t\t\tv.multiplyScalar( - distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// pass in distance in world space to move up\n\t\tthis.panUp = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panUp ( distance ) {\n\n\t\t\t\tvar te = this.object.matrix.elements;\n\n\t\t\t\t// get Y column of matrix\n\t\t\t\tv.set( te[ 4 ], te[ 5 ], te[ 6 ] );\n\t\t\t\tv.multiplyScalar( distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// pass in x,y of change desired in pixel space,\n\t\t// right and down are positive\n\t\tthis.pan = function ( deltaX, deltaY, screenWidth, screenHeight ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\tvar offset = position.clone().sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\tscope.panLeft( 2 * deltaX * targetDistance / screenHeight );\n\t\t\t\tscope.panUp( 2 * deltaY * targetDistance / screenHeight );\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tscope.panLeft( deltaX * ( scope.object.right - scope.object.left ) / screenWidth );\n\t\t\t\tscope.panUp( deltaY * ( scope.object.top - scope.object.bottom ) / screenHeight );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic or perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.dollyIn = function ( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale /= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.dollyOut = function ( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale *= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( this.minZoom, Math.min( this.maxZoom, this.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.update = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\tvar quatInverse = quat.clone().inverse();\n\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\t\treturn function () {\n\n\t\t\t\tvar position = this.object.position;\n\n\t\t\t\toffset.copy( position ).sub( this.target );\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t\t// angle from z-axis around y-axis\n\n\t\t\t\ttheta = Math.atan2( offset.x, offset.z );\n\n\t\t\t\t// angle from y-axis\n\n\t\t\t\tphi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );\n\n\t\t\t\ttheta += thetaDelta;\n\t\t\t\tphi += phiDelta;\n\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\ttheta = Math.max( this.minAzimuthAngle, Math.min( this.maxAzimuthAngle, theta ) );\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tphi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );\n\n\t\t\t\t// restrict phi to be betwee EPS and PI-EPS\n\t\t\t\tphi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );\n\n\t\t\t\tvar radius = offset.length() * scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tradius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );\n\n\t\t\t\t// move target to panned location\n\t\t\t\tthis.target.add( panOffset );\n\n\t\t\t\toffset.x = radius * Math.sin( phi ) * Math.sin( theta );\n\t\t\t\toffset.y = radius * Math.cos( phi );\n\t\t\t\toffset.z = radius * Math.sin( phi ) * Math.cos( theta );\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\t\tposition.copy( this.target ).add( offset );\n\n\t\t\t\tthis.object.lookAt( this.target );\n\n\t\t\t\tif ( this.enableDamping === true ) {\n\n\t\t\t\t\tthetaDelta *= ( 1 - this.dampingFactor );\n\t\t\t\t\tphiDelta *= ( 1 - this.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthetaDelta = 0;\n\t\t\t\t\tphiDelta = 0;\n\n\t\t\t\t}\n\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\t lastPosition.distanceToSquared( this.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( this.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tlastPosition.copy( this.object.position );\n\t\t\t\t\tlastQuaternion.copy( this.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t}();\n\n\t};\n\n\n\t// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\n\t// the \"up\" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\n\t// supported.\n\t//\n\t//    Orbit - left mouse / touch: one finger move\n\t//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n\t//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\n\tfunction OrbitControls ( object, domElement ) {\n\n\t\tvar constraint = new OrbitConstraint( object );\n\n\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t\t// API\n\n\t\tObject.defineProperty( this, 'constraint', {\n\n\t\t\tget: function() {\n\n\t\t\t\treturn constraint;\n\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn constraint.getPolarAngle();\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn constraint.getAzimuthalAngle();\n\n\t\t};\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// center is old, deprecated; use \"target\" instead\n\t\tthis.center = this.target;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for\n\t\t// backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t\t////////////\n\t\t// internals\n\n\t\tvar scope = this;\n\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\n\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\t\tvar state = STATE.NONE;\n\n\t\t// for reset\n\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t// events\n\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\n\t\t// pass in x,y of change desired in pixel space,\n\t\t// right and down are positive\n\t\tfunction pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tconstraint.pan( deltaX, deltaY, element.clientWidth, element.clientHeight );\n\n\t\t}\n\n\t\tthis.update = function () {\n\n\t\t\tif ( this.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\tconstraint.rotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( constraint.update() === true ) {\n\n\t\t\t\tthis.dispatchEvent( changeEvent );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tstate = STATE.NONE;\n\n\t\t\tthis.target.copy( this.target0 );\n\t\t\tthis.object.position.copy( this.position0 );\n\t\t\tthis.object.zoom = this.zoom0;\n\n\t\t\tthis.object.updateProjectionMatrix();\n\t\t\tthis.dispatchEvent( changeEvent );\n\n\t\t\tthis.update();\n\n\t\t};\n\n\t\tfunction getAutoRotationAngle() {\n\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t}\n\n\t\tfunction getZoomScale() {\n\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t}\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\t\tconstraint.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\t\tconstraint.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\t\tconstraint.dollyIn( getZoomScale() );\n\n\t\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\t\tconstraint.dollyOut( getZoomScale() );\n\n\t\t\t\t}\n\n\t\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\tpanEnd.set( event.clientX, event.clientY );\n\t\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\t\tpanStart.copy( panEnd );\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) scope.update();\n\n\t\t}\n\n\t\tfunction onMouseUp( /* event */ ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\t\t\tscope.dispatchEvent( endEvent );\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onMouseWheel( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\tvar delta = 0;\n\n\t\t\tif ( event.wheelDelta !== undefined ) {\n\n\t\t\t\t// WebKit / Opera / Explorer 9\n\n\t\t\t\tdelta = event.wheelDelta;\n\n\t\t\t} else if ( event.detail !== undefined ) {\n\n\t\t\t\t// Firefox\n\n\t\t\t\tdelta = - event.detail;\n\n\t\t\t}\n\n\t\t\tif ( delta > 0 ) {\n\n\t\t\t\tconstraint.dollyOut( getZoomScale() );\n\n\t\t\t} else if ( delta < 0 ) {\n\n\t\t\t\tconstraint.dollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tscope.update();\n\t\t\tscope.dispatchEvent( startEvent );\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t}\n\n\t\tfunction onKeyDown( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\t\tswitch ( event.keyCode ) {\n\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction touchstart( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\t\t\t\t\tdollyStart.set( 0, distance );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) scope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t\tfunction touchmove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return;\n\n\t\t\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\t\t\tconstraint.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\t\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\t\t\tconstraint.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return;\n\n\t\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\t\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\t\t\tdollyEnd.set( 0, distance );\n\t\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\t\t\tconstraint.dollyOut( getZoomScale() );\n\n\t\t\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\t\t\tconstraint.dollyIn( getZoomScale() );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return;\n\n\t\t\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\t\t\tpanStart.copy( panEnd );\n\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction touchend( /* event */ ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tscope.dispatchEvent( endEvent );\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction contextmenu( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t}\n\n\t\tthis.dispose = function() {\n\n\t\t\tthis.domElement.removeEventListener( 'contextmenu', contextmenu, false );\n\t\t\tthis.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\t\tthis.domElement.removeEventListener( 'mousewheel', onMouseWheel, false );\n\t\t\tthis.domElement.removeEventListener( 'MozMousePixelScroll', onMouseWheel, false ); // firefox\n\n\t\t\tthis.domElement.removeEventListener( 'touchstart', touchstart, false );\n\t\t\tthis.domElement.removeEventListener( 'touchend', touchend, false );\n\t\t\tthis.domElement.removeEventListener( 'touchmove', touchmove, false );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t}\n\n\t\tthis.domElement.addEventListener( 'contextmenu', contextmenu, false );\n\n\t\tthis.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\t\tthis.domElement.addEventListener( 'mousewheel', onMouseWheel, false );\n\t\tthis.domElement.addEventListener( 'MozMousePixelScroll', onMouseWheel, false ); // firefox\n\n\t\tthis.domElement.addEventListener( 'touchstart', touchstart, false );\n\t\tthis.domElement.addEventListener( 'touchend', touchend, false );\n\t\tthis.domElement.addEventListener( 'touchmove', touchmove, false );\n\n\t\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t\t// force an update at start\n\t\tthis.update();\n\n\t};\n\n\tOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\tOrbitControls.prototype.constructor = OrbitControls;\n\n\tObject.defineProperties( OrbitControls.prototype, {\n\n\t\tobject: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.object;\n\n\t\t\t}\n\n\t\t},\n\n\t\ttarget: {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.target;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: target is now immutable. Use target.set() instead.' );\n\t\t\t\tthis.constraint.target.copy( value );\n\n\t\t\t}\n\n\t\t},\n\n\t\tminDistance : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.minDistance;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.constraint.minDistance = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmaxDistance : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.maxDistance;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.constraint.maxDistance = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tminZoom : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.minZoom;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.constraint.minZoom = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmaxZoom : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.maxZoom;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.constraint.maxZoom = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tminPolarAngle : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.minPolarAngle;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.constraint.minPolarAngle = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmaxPolarAngle : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.maxPolarAngle;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.constraint.maxPolarAngle = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tminAzimuthAngle : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.minAzimuthAngle;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.constraint.minAzimuthAngle = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tmaxAzimuthAngle : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.maxAzimuthAngle;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.constraint.maxAzimuthAngle = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tenableDamping : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.enableDamping;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.constraint.enableDamping = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdampingFactor : {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn this.constraint.dampingFactor;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tthis.constraint.dampingFactor = value;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// backward compatibility\n\n\t\tnoZoom: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\treturn ! this.enableZoom;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\tthis.enableZoom = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoRotate: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\treturn ! this.enableRotate;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\tthis.enableRotate = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoPan: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\treturn ! this.enablePan;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\tthis.enablePan = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoKeys: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\treturn ! this.enableKeys;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\tthis.enableKeys = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tstaticMoving : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\treturn ! this.constraint.enableDamping;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\tthis.constraint.enableDamping = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdynamicDampingFactor : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\treturn this.constraint.dampingFactor;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\tthis.constraint.dampingFactor = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn OrbitControls;\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-orbit-controls/index.js\n ** module id = 12\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./~/three-orbit-controls/index.js?");

/***/ },
/* 13 */
/***/ function(module, exports) {

	eval("// removed by extract-text-webpack-plugin\n\n/*****************\n ** WEBPACK FOOTER\n ** ./_scss/style.scss\n ** module id = 13\n ** module chunks = 0\n **/\n//# sourceURL=webpack:///./_scss/style.scss?");

/***/ }
/******/ ]);